@inproceedings{Bolz:2013:SSC,
  acmid = {2509531},
  added-at = {2015-03-20T11:44:58.000+0100},
  author = {Bolz, Carl Friedrich and Diekmann, Lukas and Tratt, Laurence},
  biburl = {https://www.bibsonomy.org/bibtex/28f40c457da1215fa2253f4669d8f2141/gron},
  booktitle = {Proceedings of the 2013 ACM SIGPLAN International Conference on Object Oriented Programming Systems Languages \& Applications},
  description = {Storage strategies for collections in dynamically typed languages},
  doi = {10.1145/2509136.2509531},
  interhash = {79dbf78284a25256837af40293f3969b},
  intrahash = {8f40c457da1215fa2253f4669d8f2141},
  isbn = {978-1-4503-2374-1},
  keywords = {Arrays Collections Lists Optimization Pattern Performance Strategy VM},
  location = {Indianapolis, Indiana, USA},
  numpages = {16},
  pages = {167--182},
  publisher = {ACM},
  series = {OOPSLA '13},
  timestamp = {2017-11-09T15:49:40.000+0100},
  title = {Storage Strategies for Collections in Dynamically Typed Languages},
  year = 2013
}

@book{brown1998antipatterns,
  added-at = {2018-01-23T00:54:34.000+0100},
  address = {New York},
  author = {Brown, William J. and Malveau, Raphael C. and McCormick, Hays W. and Mowbray, Thomas J.},
  biburl = {https://www.bibsonomy.org/bibtex/2c00f52137e005d8673ec2edfe88d77d5/gron},
  description = {AntiPatterns: Refactoring Software, Architectures, and Projects in Crisis: William J. Brown, Raphael C. Malveau, Hays W. "Skip" McCormick, Thomas J. Mowbray: 9780471197133: Amazon.com: Books},
  interhash = {789701a128664c7aaefcf8a00a2567f6},
  intrahash = {c00f52137e005d8673ec2edfe88d77d5},
  isbn = {9780471197133},
  keywords = {AntiPatterns Engineering Patterns Software TheBlob},
  publisher = {John Wiley and Sons},
  refid = {716881111},
  timestamp = {2018-01-23T00:54:34.000+0100},
  title = {AntiPatterns: Refactoring Software, Architectures, and Projects in Crisis},
  year = 1998
}

@inproceedings{Costa:2017:ESU,
  abstract = {Collection data structures have a major impact on the performance of applications, especially in languages such as Java, C#, or C++. This requires a developer to select an appropriate collection from a large set of possibilities, including different abstractions (e.g. list, map, set, queue), and multiple implementations. In Java, the default implementation of collections is provided by the standard Java Collection Framework (JCF). However, there exist a large variety of less known third-party collection libraries which can provide substantial performance benefits with minimal code changes. In this paper, we first study the popularity and usage patterns of collection implementations by mining a code corpus comprised of 10,986 Java projects. We use the results to evaluate and compare the performance of the six most popular alternative collection libraries in a large variety of scenarios. We found that for almost every scenario and JCF collection type there is an alternative implementation that greatly decreases memory consumption while offering comparable or even better execution time. Memory savings range from 60% to 88% thanks to reduced overhead and some operations execute 1.5x to 50x faster. We present our results as a comprehensive guideline to help developers in identifying the scenarios in which an alternative implementation can provide a substantial performance improvement. Finally, we discuss how some coding patterns result in substantial performance differences of collections.},
  acmid = {3030221},
  added-at = {2018-01-15T17:31:16.000+0100},
  address = {New York, NY, USA},
  author = {Costa, Diego and Andrzejak, Artur and Seboek, Janos and Lo, David},
  biburl = {https://www.bibsonomy.org/bibtex/2b41a078eda7211c5a0225eb1c7cbfeb0/gron},
  booktitle = {Proceedings of the 8th ACM/SPEC on International Conference on Performance Engineering},
  description = {Empirical Study of Usage and Performance of Java Collections},
  doi = {10.1145/3030207.3030221},
  interhash = {d4ad4eeaa3bf151508506d442199f037},
  intrahash = {b41a078eda7211c5a0225eb1c7cbfeb0},
  isbn = {978-1-4503-4404-3},
  keywords = {ArrayList Collections DataStructures Java JustInTime Optimization Performance Survey Usage},
  location = {L'Aquila, Italy},
  numpages = {12},
  pages = {389--400},
  publisher = {ACM},
  series = {ICPE '17},
  timestamp = {2018-01-15T17:31:16.000+0100},
  title = {{Empirical Study of Usage and Performance of Java Collections}},
  url = {http://doi.acm.org/10.1145/3030207.3030221},
  year = 2017
}

@article{Bergel:2018,
  abstract = {Expandable collections are collections whose size may vary as elements are added and removed. Hash maps and ordered collections are popular expandable collections. Expandable collection classes offer an easy-to-use API, however this apparent simplicity is accompanied by a significant amount of wasted resources. We describe some improvements of the collection library to reduce the amount of waste associated with collection expansions. We have designed two new collection libraries for the Pharo programming language that exhibit better resource management than the standard library. We improved the Pharo collection library using two complementary perspectives. First, across a basket of 5 applications, our optimized collection library significantly reduces the memory footprint of the collections: (i) the amount of intermediary internal array storage by 73%, (ii) the number of allocated bytes by 67% and (iii) the number of unused bytes by 72%. This reduction of memory is accompanied by a speedup of about 3% for most of our benchmarks. Second, we looked for an alternative to the classical expandable collection. The Lua programming language offers a unique abstract data type called table. We designed, implemented, and introduced this data type in the Pharo programming language and we ran a number of micro and macro-benchmarks. Overall, replacing the standard Pharo collection library by one inspired on Lua's table data type results in an execution speedup of up to 15% and a reduction of the memory consumption by up to 19%. We analyzed the collection implementations of Java, C#, Scala, and Ruby: these implementations largely behave like Pharo's, therefore with the same limitations. Our results are thus likely to benefit designers of future programming languages and collection libraries.},
  added-at = {2018-01-24T00:35:27.000+0100},
  author = {Bergel, Alexandre and Infante, Alejandro and Maass, Sergio and Alcocer, Juan Pablo Sandoval},
  biburl = {https://www.bibsonomy.org/bibtex/2d141399f43fc26c2c1acb99d1603b801/gron},
  description = {Reducing resource consumption of expandable collections: The Pharo case - ScienceDirect},
  doi = {10.1016/j.scico.2017.12.009},
  interhash = {555ccfacedaceaba41eec65699aaa0de},
  intrahash = {d141399f43fc26c2c1acb99d1603b801},
  issn = {0167-6423},
  journal = {Science of Computer Programming},
  keywords = {ArrayList Collections Lua OrderedCollection Smalltalk Survey Table},
  timestamp = {2018-01-24T00:35:27.000+0100},
  title = {Reducing Resource Consumption of Expandable Collections: The Pharo Case},
  year = 2018
}

@inproceedings{Odersky:2009,
  added-at = {2018-01-26T00:38:37.000+0100},
  address = {Dagstuhl, Germany},
  annote = {Keywords: Programming languages, scala, avoiding code duplication, higher-order kinds, type systems, polymorphism, collections library},
  author = {Odersky, Martin and Moors, Adriaan},
  biburl = {https://www.bibsonomy.org/bibtex/28e7d0424f0a66ab774a92ae61afc2d21/gron},
  booktitle = {IARCS Annual Conference on Foundations of Software Technology and Theoretical Computer Science},
  doi = {10.4230/LIPIcs.FSTTCS.2009.2338},
  editor = {Kannan, Ravi and Kumar, K. Narayan},
  interhash = {627bf825bd5abd6c0411b594a26b6ced},
  intrahash = {8e7d0424f0a66ab774a92ae61afc2d21},
  isbn = {978-3-939897-13-2},
  issn = {1868-8969},
  keywords = {Collections Design ExperienceReport Scala},
  pages = {427--451},
  publisher = {Schloss Dagstuhl--Leibniz-Zentrum fuer Informatik},
  series = {Leibniz International Proceedings in Informatics (LIPIcs)},
  timestamp = {2018-01-26T00:38:37.000+0100},
  title = {{Fighting bit Rot with Types (Experience Report: Scala Collections)}},
  url = {http://drops.dagstuhl.de/opus/volltexte/2009/2338},
  urn = {urn:nbn:de:0030-drops-23386},
  volume = 4,
  year = 2009
}

@article{Garcia:2007,
  abstract = {AbstractMany modern programming languages support basic generics, sufficient to implement type-safe polymorphic containers. Some languages have moved beyond this basic support, and in doing so have enabled a broader, more powerful form of generic programming. This paper reports on a comprehensive comparison of facilities for generic programming in eight programming languages: C++, Standard ML, Objective Caml, Haskell, Eiffel, Java, C# (with its proposed generics extension), and Cecil. By implementing a substantial example in each of these languages, we illustrate how the basic roles of generic programming can be represented in each language. We also identify eight language properties that support this broader view of generic programming: support for multi-type concepts, multiple constraints on type parameters, convenient associated type access, constraints on associated types, retroactive modeling, type aliases, separate compilation of algorithms and data structures, and implicit argument type deduction for generic algorithms. We find that these features are necessary to avoid awkward designs, poor maintainability, and painfully verbose code. As languages increasingly support generics, it is important that language designers understand the features necessary to enable the effective use of generics and that their absence can cause difficulties for programmers.},
  added-at = {2018-01-28T17:20:18.000+0100},
  author = {Garcia, Ronald and JÃ¤rvi, Jaakko and Lumsdaine, Andrew and Siek, Jeremy and Willcock, Jeremiah},
  biburl = {https://www.bibsonomy.org/bibtex/27813d47b79f3428c6610fe61146c2f80/gron},
  booktitle = {Journal of Functional Programming},
  description = {An extended comparative study of language support for generic programming | Journal of Functional Programming | Cambridge Core},
  doi = {10.1017/S0956796806006198},
  interhash = {89ce17b918331ea78647442a23d3cf96},
  intrahash = {7813d47b79f3428c6610fe61146c2f80},
  issn = {09567968},
  keywords = {Design GenericProgramming Generics Graphs Library Templates},
  number = 2,
  pages = {145--205},
  publisher = {Cambridge University Press},
  timestamp = {2018-01-28T17:20:18.000+0100},
  title = {An extended comparative study of language support for generic programming},
  url = {https://www.cambridge.org/core/article/an-extended-comparative-study-of-language-support-for-generic-programming/C97D5964ECC2E651EEF9A70BC50600A6},
  volume = 17,
  year = 2007
}

@inproceedings{Chakravarty:2005:ATC,
  acmid = {1040306},
  added-at = {2018-01-28T17:25:16.000+0100},
  author = {Chakravarty, Manuel M. T. and Keller, Gabriele and Peyton Jones, Simon L. and Marlow, Simon},
  biburl = {https://www.bibsonomy.org/bibtex/28abc0ad9ede1ff26e104870b16839fa8/gron},
  booktitle = {Proceedings of the 32Nd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
  description = {Associated types with class},
  doi = {10.1145/1040305.1040306},
  interhash = {bcfe3819f9c4e8261e679bcaea7de4ee},
  intrahash = {8abc0ad9ede1ff26e104870b16839fa8},
  isbn = {1-58113-830-X},
  keywords = {Haskell LanguageDesign Polymorphism TypeClasses Types},
  location = {Long Beach, California, USA},
  numpages = {13},
  pages = {1--13},
  publisher = {ACM},
  series = {POPL '05},
  timestamp = {2018-01-28T17:25:16.000+0100},
  title = {{Associated Types with Class}},
  url = {http://simonmar.github.io/bib/papers/assoc.pdf},
  year = 2005
}

@inproceedings{Cook:1992:ISS,
  acmid = {141938},
  added-at = {2018-01-28T17:30:51.000+0100},
  author = {Cook, William R.},
  biburl = {https://www.bibsonomy.org/bibtex/251953149154e17f2016e9c55a67cf07d/gron},
  booktitle = {Conference Proceedings on Object-oriented Programming Systems, Languages, and Applications},
  doi = {10.1145/141936.141938},
  interhash = {fbf24e25c58a2656d46634d2bae86fc2},
  intrahash = {51953149154e17f2016e9c55a67cf07d},
  isbn = {0-201-53372-3},
  keywords = {Collections Hierarchy Inheritance LibraryDesign Reuse Smalltalk},
  location = {Vancouver, British Columbia, Canada},
  numpages = {15},
  pages = {1--15},
  publisher = {ACM},
  series = {OOPSLA '92},
  timestamp = {2018-01-28T17:30:51.000+0100},
  title = {{Interfaces and Specifications for the Smalltalk-80 Collection Classes}},
  year = 1992
}

@inproceedings{Black:2003:ATS,
  added-at = {2008-06-20T12:15:49.000+0200},
  author = {Black, Andrew P. and Sch\"{a}rli, Nathanael and Ducasse, St\'{e}phane},
  biburl = {https://www.bibsonomy.org/bibtex/29fd14266178cf60aea252e36fb322077/gron},
  booktitle = {Proceedings of the 18th Annual ACM SIGPLAN Conference on Object-oriented Programing, Systems, Languages, and Applications},
  description = {Traits},
  doi = {10.1145/949305.949311},
  file = {p47-black.pdf:Traits\\p47-black.pdf:PDF},
  interhash = {2252e080d93a9c1317fbe3272c2cba7f},
  intrahash = {9fd14266178cf60aea252e36fb322077},
  isbn = {1-58113-712-5},
  keywords = {SDSeminar Traits},
  location = {Anaheim, California, USA},
  pages = {47--64},
  publisher = {ACM},
  series = {OOPSLA '03},
  timestamp = {2018-01-28T17:39:50.000+0100},
  title = {{Applying Traits to the Smalltalk Collection Classes}},
  year = 2003
}

@inproceedings{PeytonJones:1996:BTC,
  abstract = {
Bulk types - such as lists, bags, ets, finite maps, and priority queues - are ubiquitous in programming. Yet many languages don't support them well, even though they have received a great deal of attention, especially from the database community. Haskell is currently among the culprits.

This paper has two aims: to identify some of the technical difficulties, and to attempt to address them using Haskell's constructor classes.},
  added-at = {2018-01-28T18:29:41.000+0100},
  author = {Peyton Jones, Simon L.},
  biburl = {https://www.bibsonomy.org/bibtex/264cd09eed7755794c01cf21eaaf182ab/gron},
  booktitle = {In Proceedings of the Second Haskell Workshop},
  interhash = {fa9dac8421798fc3ce1d97b3d33f5e2d},
  intrahash = {64cd09eed7755794c01cf21eaaf182ab},
  keywords = {BulkTypes Collections Haskell Lists Maps},
  month = {September},
  timestamp = {2018-01-28T18:29:41.000+0100},
  title = {{Bulk types with class}},
  url = {https://www.microsoft.com/en-us/research/publication/bulk-types-with-class/},
  year = 1996
}

@inproceedings{Chuang:1996:PAP,
  acmid = {232648},
  added-at = {2018-01-28T18:52:44.000+0100},
  author = {Chuang, Tyng-Ruey and Hwang, Wen L.},
  biburl = {https://www.bibsonomy.org/bibtex/2cbcbae8045b0031bab533c438c0d68b0/gron},
  booktitle = {Proceedings of the First ACM SIGPLAN International Conference on Functional Programming},
  doi = {10.1145/232627.232648},
  interhash = {27c627e1760d23fd91eb621219cc5cce},
  intrahash = {cbcbae8045b0031bab533c438c0d68b0},
  isbn = {0-89791-770-7},
  keywords = {Collections DataStructures JIT Maps Online RunTime Selection},
  location = {Philadelphia, Pennsylvania, USA},
  numpages = {11},
  pages = {190--200},
  publisher = {ACM},
  series = {ICFP '96},
  timestamp = {2018-01-28T18:52:44.000+0100},
  title = {{A Probabilistic Approach to the Problem of Automatic Selection of Data Representations}},
  year = 1996
}

@inbook{Matthes:2000:BT,
  abstract = {Bulk structures play a central r{\^o}le in data-intensive application programming. The issues of bulk type definition and implementation as well as their integration into database programming languages are, therefore, key topics in current DBPL research.},
  added-at = {2018-01-28T20:23:03.000+0100},
  address = {Berlin, Heidelberg},
  author = {Matthes, Florian and Schmidt, Joachim W.},
  biburl = {https://www.bibsonomy.org/bibtex/2da8e43dba223861c028556c5bdec6fe7/gron},
  booktitle = {Fully Integrated Data Environments: Persistent Programming Languages, Object Stores, and Programming Environments},
  doi = {10.1007/978-3-642-59623-0_16},
  editor = {Atkinson, Malcolm P. and Welland, Ray},
  interhash = {820ad136d1f2b2785dc8a1b4b3e89fb1},
  intrahash = {da8e43dba223861c028556c5bdec6fe7},
  isbn = {978-3-642-59623-0},
  keywords = {Collections DataBases Framework LanguageDesign Library PositionPaper},
  pages = {257--261},
  publisher = {Springer},
  timestamp = {2018-01-28T20:23:03.000+0100},
  title = {Bulk Types: Built-in or Add-On?},
  year = 2000
}

